const SUPPORTED_LANGUAGES = ['en', 'ru'];
const userLanguage = navigator.language.slice(0, 2).toLowerCase();
const language = SUPPORTED_LANGUAGES.includes(userLanguage) ? userLanguage : 'en';


document.addEventListener('DOMContentLoaded', () => {
	console.log('Page loaded and DOM is ready.');
	document.documentElement.setAttribute('lang', language);
	

	document.body.addEventListener('click', (event) => {
		const target = event.target;

		if (target.classList.contains('clickable')) {
			console.log('Clickable element clicked:', target);
			handleElementClick(target);
		}



		if (target.classList.contains('alternative-modes-header-tab-button') || target.closest('.alternative-modes-header-tab-button')) {
			const button = target.classList.contains('alternative-modes-header-tab-button') ? target : target.closest('.alternative-modes-header-tab-button');
			const allTabButtons = document.querySelectorAll('.alternative-modes-header-tab-button');

			allTabButtons.forEach(btn => btn.classList.remove('active'));
			button.classList.add('active');
		}
	});



	
	if (document.querySelector('.alternative-modes-header-tab-button') && !document.querySelector('.alternative-modes-header-tab-button.active')) {
		document.querySelector('.alternative-modes-header-tab-button').click();
	}
});

function handleElementClick(element) {
	console.log('Handling click for element:', element);
}

/**
 * @param {...(number|string)} codePoints - –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ–¥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π (—á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞).
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª(—ã) –ø–æ –∫–æ–¥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ Unicode.
 * @returns {string} –°–∏–º–≤–æ–ª –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤.
 */
function getUnicodeCharacters(...codePoints) {
	const toCodePoint = code => 
		typeof code === 'string' ? parseInt(code, 16) : code;

	return codePoints.map(code => String.fromCodePoint(toCodePoint(code))).join('');
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
console.log(getUnicodeCharacters('1F600')); // –í—ã–≤–æ–¥: üòÄ
console.log(getUnicodeCharacters('1F600', '1F601', '1F602')); // –í—ã–≤–æ–¥: üòÄüòÅüòÇ
console.log(getUnicodeCharacters(0x1F600, 0x1F601)); // –í—ã–≤–æ–¥: üòÄüòÅ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —á–∏—Å–µ–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ –≤—Å–µ–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ Unicode –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.
 * @param {string} ranges - –î–∏–∞–ø–∞–∑–æ–Ω(—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ "XXXX-YYYY;ZZZZ-WWWW" (–≥–¥–µ XXXX, YYYY –∏ —Ç.–¥. ‚Äî —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–µ –∫–æ–¥–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏).
 * @param {string} [separator=""] - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞).
 * @param {string} [prefix=""] - –°–∏–º–≤–æ–ª, –¥–æ–±–∞–≤–ª—è–µ–º—ã–π –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤—Å—Ç–∞–≤–ª—è–µ–º—ã–º —Å–∏–º–≤–æ–ª–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø—É—Å—Ç–æ).
 * @returns {string} –°—Ç—Ä–æ–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞(–æ–≤).
 */
function getUnicodeRange(ranges, separator = "", prefix = "") {
	const characters = [];

	ranges.split(';').forEach(range => {
		const [start, end] = range.split('-').map(code => parseInt(code, 16));
		if (isNaN(start) || isNaN(end) || start > end) {
			throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω Unicode: ${range}`);
		}

		for (let codePoint = start; codePoint <= end; codePoint++) {
			characters.push(prefix + String.fromCodePoint(codePoint));
		}
	});

	return characters.join(separator);
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
console.log(getUnicodeRange("1E000-1E006;1E008-1E018;1E01B-1E021;1E023-1E024;1E026-1E02A", "", "\u25CC")); 
console.log(getUnicodeRange("2C00-2C5F"));
console.log(getUnicodeRange("2C00-2C05", ", "));