/** ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
 *  ▓ @author Yalla Nkardaz (Ялла Нкардаз де Тудерий) aka Demer Nkardaz @DemerNkardaz
 *  ▓ Title:   DSL KeyPad (Diacritics-Spaces-Letters KeyPad)
 *  ▓ Version: 0.1.2
 *  ▓ Description: Multilingual input tool for typing languages based on
 *                 Latin & Cyrillic scripts, special characters, and historical
 *                 scripts (Old Turkic, Permic, Hungarian, Italic, Runic,
 *                 Phoenician, Glagolitic, etc.).
 *  ▓ Repository: {@link https://github.com/DemerNkardaz/DSL-KeyPad}
 *  ▓ License:    {@license MIT}
 *  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
 **/

#SingleInstance Force
SetKeyDelay(0, 50)
A_HotkeyInterval := 1000
A_MaxHotkeysPerInterval := 50

initialized := False

#Include <External\JSON>
#Include <External\function_gui_button_icon>

#Include <utils>
#Include <hotstrings>
#Include <default_variables>
; Supplementary include with binds that calls functions/methods
#Include Data\binds.ahk
; Supplementary include with character entries generated by Loops
#Include Data\characters.ahk
#Include <Classes\class_event>
#Include <Classes\class_mods_injector>
; Automatically created/updated by mods injector class
; Dynamically loads mods pasted into \Mods\ directory
#Include *i Mods\injector_pre_init.ahk

#Include <Classes\class_progress_bar>
#Include <Classes\class_progress_tooltip>

#Include <Classes\class_code_pages_storage>

#Include <Classes\class_clip>
#Include <Classes\class_util>
#Include <Classes\class_side_process>
#Include <Classes\class_config>
#Include <Classes\class_variable_parser>
#Include <Classes\class_character_block>
#Include <Classes\class_unicode_web_resource>
#Include <Classes\class_search>
#Include <Classes\class_application>
#Include <Classes\class_tray_menu>
; Currently has no logic to run
; SideProcess.StartDynamic("support", , App.Title("+status+version") "``n" Locale.Read("side_process.support"), App.icoDLL, App.indexIcos["support"], App.PID)
TrayMenu.SetTrayItems()
#Include <Classes\class_language>
#Include <Classes\class_keyboard>
#Include <Classes\class_locale>
#Include <Classes\class_locale_generator>
#Include <Classes\class_character_recipe_handler>
#Include <Classes\class_character_entity>
#Include <Classes\class_character_inserter>
#Include <Classes\class_character_registrar>
#Include <Classes\class_character_library>
#Include <Classes\class_character_crafter>
#Include <Classes\class_update>
#Include <Classes\class_fonts>
#Include <Classes\class_script_processor>
#Include <Classes\class_functional_bindings_storage>
#Include <Classes\class_favorites>
#Include <Classes\class_user_defined_recipes>
#Include <Classes\class_auxiliary>
#Include <Classes\class_text_handlers>
#Include <Classes\class_grep_typography>
#Include <Classes\class_grep_typography_registrar>

#Include <Classes\class_keyboard_binder>
#Include <Classes\class_binding_registrar>
#Include <Classes\class_binding_user_defined>
#Include <Classes\class_binding_handler>
#Include <Classes\class_binding_list>
#Include <Classes\class_scripter_store>
#Include <Classes\class_scripter>
#Include <Classes\class_keyboard_layout>
#Include <Classes\class_keyboard_layout_registrar>
#Include <Classes\class_keyboard_layout_user_defined>
#Include <Classes\class_keyboard_monitor>

#Include <Classes\class_ui_glyph_variations_panel>
#Include <Classes\class_ui_character_legend_storage>
#Include <Classes\class_ui_character_legend>
#Include <Classes\class_ui_panel>
#Include <Classes\class_ui_panel_filter>
#Include <Classes\class_ui_mods>
#Include <Classes\class_key_event>
#Include <Classes\class_long_press>
#Include <Classes\class_hotstrings_latex>
#Include <Classes\class_tempature_converter>
#Include <Classes\class_dev>
DottedProgressTooltip(4, &triggerEnds := False, 500)
triggerEnds := True
initialized := True

ChrLib.CountOfUpdate()
Panel.SetPanelData()
GlyphsPanel.SetPanelData()

; Automatically created/updated by mods injector class
; Dynamically loads mods pasted into \Mods\ directory
#Include *i Mods\injector_post_init.ahk

ShowEntryPreview() {
	IB := InputBox("", "", "w256 h92")
	if IB.Result = "Cancel"
		return
	else {
		ChrLib.EntryPreview(IB.Value)
	}
}

<^>^Home:: ShowEntryPreview()
<^>+Esc:: ExitApp